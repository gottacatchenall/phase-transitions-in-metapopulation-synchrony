plt3 = get_pop_points(x_vals, y_vals, 8, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 0, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 3, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 8, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 8, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 15, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 8, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 15, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 8, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 15, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 8, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 15, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in")
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
library(tikzDevice)
install.packages('tikzDevice')
library(tikzDevice)
tikz(file = "plot_test.tex", width = 12, height = 8)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
grid
setwd("~/phase_transitions_in_metapopulation_synchrony/figs")
library(ggplot2)
library(ggnet)
library(gridExtra)
library(tikzDevice)
## ============================================
## DISPERSAL KERNEL PLOTTING / FIG 1
## ============================================
exp_kern = function(alpha, d_ij){
return(exp(-1*alpha*d_ij))
}
gauss_kern = function(alpha, d_ij){
return(exp(-1*d_ij^2*alpha^2))
}
get_pop_points = function(x_vals, y_vals, alpha, mig_prop, kernel=exp_kern){
# make df with all pairwise and group by indiv pairwise val
df = data.frame(matrix(ncol=5))
line_ct = 1
grp_ct = 0
# make a dis potential first
npops = length(x_vals)
dispersal_potential = matrix(nrow=npops, ncol=npops)
for (pt_ct in seq(1, n_pops)){
s = 0
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
dist = sqrt((x2-x1)^2 + (y2-y1)^2)
dispersal_potential[pt_ct, pt_ct2] = kernel(alpha, dist)
s = s + dispersal_potential[pt_ct, pt_ct2]
}
for (pt_ct2 in seq(1, n_pops)){
dispersal_potential[pt_ct, pt_ct2]  = dispersal_potential[pt_ct, pt_ct2]  / s
}
}
for (pt_ct in seq(1, n_pops)){
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
#opac =1
opac = 0.1 + dispersal_potential[pt_ct, pt_ct2] * 5
width = dispersal_potential[pt_ct, pt_ct2] * 8
df[line_ct,] = c(x1,y1, grp_ct, opac, width)
line_ct = line_ct + 1
df[line_ct,] = c(x2,y2, grp_ct, opac, width)
line_ct = line_ct + 1
grp_ct = grp_ct + 1
}
}
colnames(df) = c("x", "y", "grp", "opac", "width")
plt = ggplot(df, aes(x,y, group=grp)) + geom_line(alpha=df$opac, size=df$width, color='#222222')+ theme(aspect.ratio=1) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border = element_rect(fill=NA, size=1, colour = "#222222"))+ geom_point(shape=1, size=3, color='black') + geom_point(alpha=0.3, size=2, color='dodgerblue') + scale_x_continuous(breaks=seq(0,1)) +  scale_y_continuous(breaks=c(0,1))
return(plt)
}
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
tikz(file = "plot_test.tex", width = 12, height = 8)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
tikz(file = "~/phase_transitions_in_metapopulation_synchrony/writing/plot_test.tex", width = 7, height = 4)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
print(plt1)
dev.off()
?grid.arrange
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=gauss_kern)
tikz(file = "~/phase_transitions_in_metapopulation_synchrony/writing/plot_test.tex", width = 7, height = 4)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
print(grid)
dev.off()
tikz(file = "~/phase_transitions_in_metapopulation_synchrony/writing/plot_test.tex", width = 7, height = 4, standAlone = T)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
print(grid)
dev.off()
tikz(file = "~/phase_transitions_in_metapopulation_synchrony/writing/figure0.tex", width = 12, height = 8, standAlone = T)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
dev.off()
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
print(grid)
get_pop_points = function(x_vals, y_vals, alpha, mig_prop, kernel=exp_kern){
# make df with all pairwise and group by indiv pairwise val
df = data.frame(matrix(ncol=5))
line_ct = 1
grp_ct = 0
# make a dis potential first
npops = length(x_vals)
dispersal_potential = matrix(nrow=npops, ncol=npops)
for (pt_ct in seq(1, n_pops)){
s = 0
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
dist = sqrt((x2-x1)^2 + (y2-y1)^2)
dispersal_potential[pt_ct, pt_ct2] = kernel(alpha, dist)
s = s + dispersal_potential[pt_ct, pt_ct2]
}
for (pt_ct2 in seq(1, n_pops)){
dispersal_potential[pt_ct, pt_ct2]  = dispersal_potential[pt_ct, pt_ct2]  / s
}
}
for (pt_ct in seq(1, n_pops)){
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
#opac =1
opac = 0.1 + dispersal_potential[pt_ct, pt_ct2] * 5
width = dispersal_potential[pt_ct, pt_ct2] * 8
df[line_ct,] = c(x1,y1, grp_ct, opac, width)
line_ct = line_ct + 1
df[line_ct,] = c(x2,y2, grp_ct, opac, width)
line_ct = line_ct + 1
grp_ct = grp_ct + 1
}
}
colnames(df) = c("x", "y", "grp", "opac", "width")
plt = ggplot(df, aes(x,y, group=grp)) +
geom_line(alpha=df$opac, size=df$width, color='#222222')+
theme(aspect.ratio=1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border = element_rect(fill=NA, size=1, colour = "#222222"))+
geom_point(shape=1, size=3, color='black') + geom_point(alpha=0.3, size=2, color='dodgerblue') +
scale_x_continuous(breaks=seq(0,1)) +  scale_y_continuous(breaks=c(0,1)) +
labs(x=expression(x))
return(plt)
}
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
?plotmath
expression(x+3)
library(extrafont)
install.packages('extrafont')
library(extrafont)
font_import(pattern = "lmroman*")
font_import(pattern = "cmunrm*")
font_import(pattern = "cmunrm*")
font_import(pattern = "cmunrm*")
loadfonts()
get_pop_points = function(x_vals, y_vals, alpha, mig_prop, kernel=exp_kern){
# make df with all pairwise and group by indiv pairwise val
df = data.frame(matrix(ncol=5))
line_ct = 1
grp_ct = 0
# make a dis potential first
npops = length(x_vals)
dispersal_potential = matrix(nrow=npops, ncol=npops)
for (pt_ct in seq(1, n_pops)){
s = 0
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
dist = sqrt((x2-x1)^2 + (y2-y1)^2)
dispersal_potential[pt_ct, pt_ct2] = kernel(alpha, dist)
s = s + dispersal_potential[pt_ct, pt_ct2]
}
for (pt_ct2 in seq(1, n_pops)){
dispersal_potential[pt_ct, pt_ct2]  = dispersal_potential[pt_ct, pt_ct2]  / s
}
}
for (pt_ct in seq(1, n_pops)){
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
#opac =1
opac = 0.1 + dispersal_potential[pt_ct, pt_ct2] * 5
width = dispersal_potential[pt_ct, pt_ct2] * 8
df[line_ct,] = c(x1,y1, grp_ct, opac, width)
line_ct = line_ct + 1
df[line_ct,] = c(x2,y2, grp_ct, opac, width)
line_ct = line_ct + 1
grp_ct = grp_ct + 1
}
}
colnames(df) = c("x", "y", "grp", "opac", "width")
plt = ggplot(df, aes(x,y, group=grp)) +
geom_line(alpha=df$opac, size=df$width, color='#222222')+
theme(aspect.ratio=1) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border = element_rect(fill=NA, size=1, colour = "#222222"))+
geom_point(shape=1, size=3, color='black') + geom_point(alpha=0.3, size=2, color='dodgerblue') +
scale_x_continuous(breaks=seq(0,1)) +  scale_y_continuous(breaks=c(0,1)) +
labs(x=expression(x))
return(plt)
}
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
get_pop_points = function(x_vals, y_vals, alpha, mig_prop, kernel=exp_kern){
# make df with all pairwise and group by indiv pairwise val
df = data.frame(matrix(ncol=5))
line_ct = 1
grp_ct = 0
# make a dis potential first
npops = length(x_vals)
dispersal_potential = matrix(nrow=npops, ncol=npops)
for (pt_ct in seq(1, n_pops)){
s = 0
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
dist = sqrt((x2-x1)^2 + (y2-y1)^2)
dispersal_potential[pt_ct, pt_ct2] = kernel(alpha, dist)
s = s + dispersal_potential[pt_ct, pt_ct2]
}
for (pt_ct2 in seq(1, n_pops)){
dispersal_potential[pt_ct, pt_ct2]  = dispersal_potential[pt_ct, pt_ct2]  / s
}
}
for (pt_ct in seq(1, n_pops)){
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
#opac =1
opac = 0.1 + dispersal_potential[pt_ct, pt_ct2] * 5
width = dispersal_potential[pt_ct, pt_ct2] * 8
df[line_ct,] = c(x1,y1, grp_ct, opac, width)
line_ct = line_ct + 1
df[line_ct,] = c(x2,y2, grp_ct, opac, width)
line_ct = line_ct + 1
grp_ct = grp_ct + 1
}
}
colnames(df) = c("x", "y", "grp", "opac", "width")
plt = ggplot(df, aes(x,y, group=grp)) +
geom_line(alpha=df$opac, size=df$width, color='#222222')+
theme(aspect.ratio=1, element_text="CMU Serif") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border = element_rect(fill=NA, size=1, colour = "#222222"))+
geom_point(shape=1, size=3, color='black') + geom_point(alpha=0.3, size=2, color='dodgerblue') +
scale_x_continuous(breaks=seq(0,1)) +  scale_y_continuous(breaks=c(0,1)) +
labs(x=expression(x))
return(plt)
}
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
get_pop_points = function(x_vals, y_vals, alpha, mig_prop, kernel=exp_kern){
# make df with all pairwise and group by indiv pairwise val
df = data.frame(matrix(ncol=5))
line_ct = 1
grp_ct = 0
# make a dis potential first
npops = length(x_vals)
dispersal_potential = matrix(nrow=npops, ncol=npops)
for (pt_ct in seq(1, n_pops)){
s = 0
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
dist = sqrt((x2-x1)^2 + (y2-y1)^2)
dispersal_potential[pt_ct, pt_ct2] = kernel(alpha, dist)
s = s + dispersal_potential[pt_ct, pt_ct2]
}
for (pt_ct2 in seq(1, n_pops)){
dispersal_potential[pt_ct, pt_ct2]  = dispersal_potential[pt_ct, pt_ct2]  / s
}
}
for (pt_ct in seq(1, n_pops)){
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
#opac =1
opac = 0.1 + dispersal_potential[pt_ct, pt_ct2] * 5
width = dispersal_potential[pt_ct, pt_ct2] * 8
df[line_ct,] = c(x1,y1, grp_ct, opac, width)
line_ct = line_ct + 1
df[line_ct,] = c(x2,y2, grp_ct, opac, width)
line_ct = line_ct + 1
grp_ct = grp_ct + 1
}
}
colnames(df) = c("x", "y", "grp", "opac", "width")
plt = ggplot(df, aes(x,y, group=grp)) +
geom_line(alpha=df$opac, size=df$width, color='#222222')+
theme(aspect.ratio=1, text=element_text("CMU Serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border = element_rect(fill=NA, size=1, colour = "#222222"))+
geom_point(shape=1, size=3, color='black') + geom_point(alpha=0.3, size=2, color='dodgerblue') +
scale_x_continuous(breaks=seq(0,1)) +  scale_y_continuous(breaks=c(0,1)) +
labs(x=expression(x))
return(plt)
}
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
get_pop_points = function(x_vals, y_vals, alpha, mig_prop, kernel=exp_kern){
# make df with all pairwise and group by indiv pairwise val
df = data.frame(matrix(ncol=5))
line_ct = 1
grp_ct = 0
# make a dis potential first
npops = length(x_vals)
dispersal_potential = matrix(nrow=npops, ncol=npops)
for (pt_ct in seq(1, n_pops)){
s = 0
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
dist = sqrt((x2-x1)^2 + (y2-y1)^2)
dispersal_potential[pt_ct, pt_ct2] = kernel(alpha, dist)
s = s + dispersal_potential[pt_ct, pt_ct2]
}
for (pt_ct2 in seq(1, n_pops)){
dispersal_potential[pt_ct, pt_ct2]  = dispersal_potential[pt_ct, pt_ct2]  / s
}
}
for (pt_ct in seq(1, n_pops)){
for (pt_ct2 in seq(1, n_pops)){
x1 = x_vals[pt_ct]
y1 = y_vals[pt_ct]
x2 = x_vals[pt_ct2]
y2 = y_vals[pt_ct2]
#opac =1
opac = 0.1 + dispersal_potential[pt_ct, pt_ct2] * 5
width = dispersal_potential[pt_ct, pt_ct2] * 8
df[line_ct,] = c(x1,y1, grp_ct, opac, width)
line_ct = line_ct + 1
df[line_ct,] = c(x2,y2, grp_ct, opac, width)
line_ct = line_ct + 1
grp_ct = grp_ct + 1
}
}
colnames(df) = c("x", "y", "grp", "opac", "width")
plt = ggplot(df, aes(x,y, group=grp)) +
geom_line(alpha=df$opac, size=df$width, color='#222222')+
theme(aspect.ratio=1, text=element_text("CMU Serif Roman")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border = element_rect(fill=NA, size=1, colour = "#222222"))+
geom_point(shape=1, size=3, color='black') + geom_point(alpha=0.3, size=2, color='dodgerblue') +
scale_x_continuous(breaks=seq(0,1)) +  scale_y_continuous(breaks=c(0,1)) +
labs(x=expression(x))
return(plt)
}
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
loadfonts()
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text         = element_text(size=10, family="CMU Serif 10")) + ggtitle("for the boys")
library(tidyverse)
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text         = element_text(size=10, family="CMU Serif 10")) + ggtitle("for the boys")
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text         = element_text(size=10, family="CMU Serif")) + ggtitle("for the boys")
pdfFonts()
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CMU Serif")) + ggtitle("for the boys")
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CMU Serif 10")) + ggtitle("for the boys")
loadfonts()
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CMU Serif Roman")) + ggtitle("for the boys")
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CMU Roman Serif")) + ggtitle("for the boys")
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CM Roman Serif")) + ggtitle("for the boys")
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CM Serif")) + ggtitle("for the boys")
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine="cairopdf")
engine
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine=cairo_pdf())
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine=cairo_pdf
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine=cairo_pdf)
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine=cairo_pdf)
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine=cairo_pdf())
loadfonts()
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="CMU Serif")) + ggtitle("for the boys")
?pdf
library(Cairo)
install.packages()
install.packages('cairo')
install.packages('Cairo')
library(Cairo)
library(Cairo)
install.packages('cairo')
install.packages('Cairo')
install.packages('Cairo')
install.packages('Cairo')
library(Cairo)
setwd("~/phase_transitions_in_metapopulation_synchrony/figs")
loadfonts()
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", engine=cairo_pdf
)
ggsave("wowee_zowee.png", dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
ggsave("wowee_zowee.pdf", dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
pwd()
getwd()
n_pops = 20
x_vals = runif(n_pops, 0, 1)
y_vals = runif(n_pops, 0, 1)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt2 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=gauss_kern)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
ggsave("wowee_zowee.pdf", dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
ggsave(grid, "wowee_zowee.pdf", dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
grild %>% ggsave("wowee_zowee.pdf", dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
grid %>% ggsave("wowee_zowee.pdf", dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
?ggsave
ggsave("wowee_zowee.pdf", plot=grid, dpi=320, width = 12, height = 8, units = "in", device=cairo_pdf)
grid
plot(grid)
grid = grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
print(grid)
grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
plt2 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=exp_kern)
plt3 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=exp_kern)
plt4 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=gauss_kern)
plt5 = get_pop_points(x_vals, y_vals, 7, 1.5, kernel=gauss_kern)
plt6 = get_pop_points(x_vals, y_vals, 12, 1.5, kernel=gauss_kern)
plt1 = get_pop_points(x_vals, y_vals, 2, 1.5, kernel=exp_kern)
plt1
plt1
dev.off()
plt1
grid
grid.arrange(plt1, plt2, plt3, plt4, plt5, plt6, nrow=2)
dev.ofF()
dev.off()
dev.off()
mtcars %>% ggplot(aes(x=mpg, y=disp)) + geom_col(aes(col=cyl)) +
theme(text  = element_text(size=10, family="Comic Sans")) + ggtitle("for the boys")
